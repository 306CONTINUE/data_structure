#include<stdio.h>
#include<stdlib.h>

#define  TRUE          1
#define  FALSE         0
#define  OK            1
#define  ERROR         0
#define  INFEASIBLE    -1
#define  OVERFLOW      -2

typedef int ElemType;
typedef int Status;

// ------ 线性表的动态分配顺序存储结构 ------
#define LIST_INIT_SIZE   100    //线性表存储空间的初始分配量
#define LISTINCREMENT    10     //线性表存储空间的分配增量
typedef struct
{
	ElemType*   elem;		//存储空间基址
	int         length;     //当前长度
	int         listsize;   //当前分配的存储容量（以sizeof(ElemType)为单位）
}
SqList;

Status InitList_Sq(SqList& L)  //构造一个空的线性表L。
{
	L.elem = (ElemType*)malloc(LIST_INIT_SIZE * sizeof(ElemType));
	if (!L.elem) exit(OVERFLOW);	//存储分配失败
	L.length = 0;					//空表长度为0
	L.listsize = LIST_INIT_SIZE;	//初始存储容量
	return OK;
}//InitList_Sq

Status ListInsert_Sq(SqList& L, int i, ElemType e)	//在顺序线性表L中第i个位置之前插入新的元素e，i的合法值为1<=i<=ListLength_Sq(L)+1
{
	if (i<1 || i>L.length + 1)	return ERROR;	//i值不合法
	if (L.length >= L.listsize)		//当前存储空间已满，增加分配
	{
		ElemType* newbase = (ElemType*)realloc(L.elem, (L.listsize + LISTINCREMENT) * sizeof(ElemType));
		if (!newbase) exit(OVERFLOW);	//存储分配失败
		L.elem = newbase;               //新基址
		L.listsize += LISTINCREMENT;    //增加存储容量
	}
	ElemType* q = &(L.elem[i - 1]);     //q为插入位置
	for (ElemType* p = &(L.elem[L.length - 1]); p >= q; --p)    *(p + 1) = *p;    //插入位置及之后的元素右移
	*q = e;                             //插入e
	++L.length;                         //表长增1
	return OK;
}//ListInsert_Sq

Status ListDelete_Sq(SqList& L, int i, ElemType& e)		//在顺序线性表L中删除第i个元素，并用e返回其值，i的合法值为1<=i<=ListLength_Sq(L)
{
	if ((i < 1) || (i > L.length)) return ERROR;     //i值不合法
	ElemType* p = &(L.elem[i - 1]);                  //p为被删除元素的位置
	e = *p;                                          //被删除元素的值赋给e
	ElemType* q = L.elem + L.length - 1;             //表尾元素的位置
	for (++p; p <= q; ++p)    *(p - 1) = *p;         //被删除元素之后的元素右移
	--L.length;                                      //表长减1
	return OK;
}//ListDelete_Sq

Status compare(ElemType e1, ElemType e2)
{
	if (e1 == e2)
		return true;
	return false;
}

int LocateElem_Sq(SqList L, ElemType e, Status(*compare)(ElemType, ElemType))     //在顺序线性表L中查找第1个值与e满足compare()的元素位序,
																				  //若找到返回在L中的位序,否则返回0
{
	int i = 1;						//i的初值为第1个元素的位序
	ElemType* p = L.elem;           //p的初值为第1个元素的存储位置
	while (i <= L.length && !(*compare)(*p++, e)) ++i;
	if (i <= L.length) return i;
	else return 0;
}//LocateElem_Sq

void MergeList_Sq(SqList La, SqList Lb, SqList& Lc)		//已知顺序线性表La和Lb的元素按值非递减排列
														//归并La和Lb得到新的顺序线性表Lc,Lc的元素也按值非递减排列
{
	ElemType* pa = La.elem;
	ElemType* pb = Lb.elem;
	Lc.listsize = Lc.length = La.length + Lb.length;
	ElemType* pc = Lc.elem = (ElemType*)malloc(Lc.listsize * sizeof(ElemType));
	if (!Lc.elem) exit(OVERFLOW);      //存储分配失败
	ElemType* pa_last = La.elem + La.length - 1;
	ElemType* pb_last = Lb.elem + Lb.length - 1;
	while (pa <= pa_last && pb <= pb_last)      //归并
	{
		if (*pa <= *pb) *pc++ = *pa++;
		else *pc++ = *pb++;
	}
	while (pa <= pa_last) *pc++ = *pa++;        //插入La的剩余元素
	while (pb <= pb_last) *pc++ = *pb++;        //插入Lb的剩余元素
}//MergeList_Sq

Status GetElem_Sq(SqList L, int i, ElemType& e)      //当第i个元素存在时，其值赋给e并返回OK，否则返回ERROR
{
	if (i <= 0 || i > L.length) return ERROR;
	e = L.elem[i-1];
	return OK;
}

int main()
{
	SqList La;
	InitList_Sq(La);

	//插入测试
	printf("插入元素分别为：");
	for(int i = 1;i<20;i++)
		ListInsert_Sq(La, i, i);
	
	ElemType e;
	for (int i = 1; i <= La.length; i++)
	{
		GetElem_Sq(La, i, e);
		printf("%2d ", e);
	}
	printf("\n");

	//删除测试
	printf("删除元素分别为：");
	for (int i = 1; i < 5; i++)
	{
		ListDelete_Sq(La, 1, e);
		printf("%2d ", e);
	}
	printf("\n");
	printf("删除后各元素为：");
	for (int i = 1; i <= La.length; i++)
	{
		GetElem_Sq(La, i, e);
		printf("%2d ", e);
	}
	printf("\n");

	//查找测试
	printf("元素 13 16 18 的位序分别为：");
	e = LocateElem_Sq(La, 13,(*compare));
	printf("%2d ", e);
	e = LocateElem_Sq(La, 16, (*compare));
	printf("%2d ", e);
	e = LocateElem_Sq(La, 18, (*compare));
	printf("%2d \n", e);

	//排列测试
	SqList Lb;
	SqList Lc;
	InitList_Sq(Lb);
	InitList_Sq(Lc);
	for (int i = 1; i < 360; i += 2)
		ListInsert_Sq(Lb,Lb.length+1,i);
		
	for (int i = 1; i <= Lb.length; i++)
	{
		GetElem_Sq(Lb, i, e);
		printf("%-3d ", e);
	}
	MergeList_Sq(La, Lb, Lc);
	for (int i = 1; i <= Lc.length; i++)
	{
		GetElem_Sq(Lc, i, e);
		printf("%-3d ", e);
	}
	return 0;
}
